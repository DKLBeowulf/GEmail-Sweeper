import imaplib
import email
from email.header import decode_header
import sys




# account credentials , edit this to use your email address.
username = 'user_email@provider.com' 

password = '' # PASSWORD this is generated by gmail and can be accessed usually in your email app, you will have to add it in the ' '

# create an IMAP4 class with SSL

imap = imaplib.IMAP4_SSL ("imap.gmail.com")

# authenticate

imap.login(username, password)

# select mailbox to access

# If you want SPAM, use imap.select("SPAM") instead

imap.select('"[Gmail]/All Mail"')

#print(imap.list) # prints available mailboxes

contact = input("Enter target email address or common NAME: ")
contact = str(contact)
# search for specific email by sender

status, messages = imap.search(None, f'FROM {contact}')

# search for specific email by subject

#status, messages = imap.search(None, 'SUBJECT' "'Trump'")

# to get email after a specific date

# status, messages = imap.search(None, 'SINCE "01-JAN-2020"')

# to get email before a specific date

# status, messages = imap.search(None, 'BEFORE "01-JAN-2020"')

# to get all email

# status, messages = imap.search(None, 'SINCE "ALL"')

# convert messages to a list of email IDs

messages = messages[0].split(b' ')
try:
    for mail in messages:
        _, msg = imap.fetch(mail, "(RFC822)")
        # you can delete this for loop if you have performance issues
        # because it is only for printing the SUBJECT of targeted email to delete

        for response in msg:
            if isinstance(response, tuple):

                msg = email.message_from_bytes(response[1])

            # decode the email subject

                subject = decode_header(msg["Subject"])[0][0]
            
                if isinstance(subject, bytes):

                    # if it's a bytes type, decode to str

                    subject = subject.decode()
            
                print("Deleting", subject)

            # mark the mail as deleted

            imap.store(mail, '+X-GM-LABELS', '\\Trash')

except imaplib.IMAP4.error:
    print("\n Those search parameters do not exist. \n \n \t EXITING...\n")
    sys.exit()

# permanently remove email that are marked as deleted
# from the selected mailbox ( in this case, [GMAIL](ALLMAIL)

imap.expunge()


# close the mailbox

imap.close()

# logout from the account

imap.logout()

